{"uid":"95a6f9da0e03f9e9","name":"test_case_1","fullName":"tests.test_delete.test_case_1#test_case_1","historyId":"c3edea2762780a6e428f73419cfab9aa","time":{"start":1749019352891,"stop":1749019364053,"duration":11162},"status":"broken","statusMessage":"TimeoutError: 等待元素可点击失败: //div[contains(text(), '停用用户')]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>, xpath = \"//div[contains(text(), '停用用户')]\", timeout = 10\n\n    def wait_for_clickable_element(driver, xpath, timeout=10):\n        \"\"\"\n        等待指定的元素变为可点击状态\n        :param driver: WebDriver 实例\n        :param xpath: 要查找的元素 XPath\n        :param timeout: 最大等待时间\n        :return: 找到的 WebElement\n        \"\"\"\n        try:\n>           element = WebDriverWait(driver, timeout).until(\n                EC.element_to_be_clickable((By.XPATH, xpath))\n            )\n\nconftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F214C0D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...44BEBA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8FA8DE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8FC2BC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.56)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF644BFCF25+75717]\nE       \tGetHandleVerifier [0x00007FF644BFCF80+75808]\nE       \t(No symbol) [0x00007FF6449C8F9A]\nE       \t(No symbol) [0x00007FF6449B4E35]\nE       \t(No symbol) [0x00007FF6449D9DB4]\nE       \t(No symbol) [0x00007FF644A4EE75]\nE       \t(No symbol) [0x00007FF644A6ECC2]\nE       \t(No symbol) [0x00007FF644A47153]\nE       \t(No symbol) [0x00007FF644A10421]\nE       \t(No symbol) [0x00007FF644A111B3]\nE       \tGetHandleVerifier [0x00007FF644EFD6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF644EF7CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF644F15AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF644C169FA+180890]\nE       \tGetHandleVerifier [0x00007FF644C1E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF644C05274+109332]\nE       \tGetHandleVerifier [0x00007FF644C05422+109762]\nE       \tGetHandleVerifier [0x00007FF644BEBA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF8FA8DE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8FC2BC5DC+44]\n\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nThe above exception was the direct cause of the following exception:\n\nlogin = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>\n\n>   ???\n\nD:\\WebTest\\snow\\tests\\test_case\\test_case_1.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\WebTest\\snow\\tests\\test_case\\test_case_1.py:18: in step_2\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>, xpath = \"//div[contains(text(), '停用用户')]\", timeout = 10\n\n    def wait_for_clickable_element(driver, xpath, timeout=10):\n        \"\"\"\n        等待指定的元素变为可点击状态\n        :param driver: WebDriver 实例\n        :param xpath: 要查找的元素 XPath\n        :param timeout: 最大等待时间\n        :return: 找到的 WebElement\n        \"\"\"\n        try:\n            element = WebDriverWait(driver, timeout).until(\n                EC.element_to_be_clickable((By.XPATH, xpath))\n            )\n            return element\n        except Exception as e:\n>           raise TimeoutError(f\"等待元素可点击失败: {xpath}\") from e\nE           TimeoutError: 等待元素可点击失败: //div[contains(text(), '停用用户')]\n\nconftest.py:93: TimeoutError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1749019349407,"stop":1749019349479,"duration":72},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"driver","time":{"start":1749019349479,"stop":1749019350938,"duration":1459},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"login","time":{"start":1749019350938,"stop":1749019352890,"duration":1952},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"TimeoutError: 等待元素可点击失败: //div[contains(text(), '停用用户')]","statusTrace":"driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>, xpath = \"//div[contains(text(), '停用用户')]\", timeout = 10\n\n    def wait_for_clickable_element(driver, xpath, timeout=10):\n        \"\"\"\n        等待指定的元素变为可点击状态\n        :param driver: WebDriver 实例\n        :param xpath: 要查找的元素 XPath\n        :param timeout: 最大等待时间\n        :return: 找到的 WebElement\n        \"\"\"\n        try:\n>           element = WebDriverWait(driver, timeout).until(\n                EC.element_to_be_clickable((By.XPATH, xpath))\n            )\n\nconftest.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:622: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:914: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F214C0D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...44BEBA39+4825]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8FA8DE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FF8FC2BC5DC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=137.0.7151.56)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF644BFCF25+75717]\nE       \tGetHandleVerifier [0x00007FF644BFCF80+75808]\nE       \t(No symbol) [0x00007FF6449C8F9A]\nE       \t(No symbol) [0x00007FF6449B4E35]\nE       \t(No symbol) [0x00007FF6449D9DB4]\nE       \t(No symbol) [0x00007FF644A4EE75]\nE       \t(No symbol) [0x00007FF644A6ECC2]\nE       \t(No symbol) [0x00007FF644A47153]\nE       \t(No symbol) [0x00007FF644A10421]\nE       \t(No symbol) [0x00007FF644A111B3]\nE       \tGetHandleVerifier [0x00007FF644EFD6FD+3223453]\nE       \tGetHandleVerifier [0x00007FF644EF7CA2+3200322]\nE       \tGetHandleVerifier [0x00007FF644F15AD3+3322739]\nE       \tGetHandleVerifier [0x00007FF644C169FA+180890]\nE       \tGetHandleVerifier [0x00007FF644C1E0FF+211359]\nE       \tGetHandleVerifier [0x00007FF644C05274+109332]\nE       \tGetHandleVerifier [0x00007FF644C05422+109762]\nE       \tGetHandleVerifier [0x00007FF644BEBA39+4825]\nE       \tBaseThreadInitThunk [0x00007FF8FA8DE8D7+23]\nE       \tRtlUserThreadStart [0x00007FF8FC2BC5DC+44]\n\nD:\\Web\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException\n\nThe above exception was the direct cause of the following exception:\n\nlogin = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>\n\n>   ???\n\nD:\\WebTest\\snow\\tests\\test_case\\test_case_1.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nD:\\WebTest\\snow\\tests\\test_case\\test_case_1.py:18: in step_2\n    ???\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>, xpath = \"//div[contains(text(), '停用用户')]\", timeout = 10\n\n    def wait_for_clickable_element(driver, xpath, timeout=10):\n        \"\"\"\n        等待指定的元素变为可点击状态\n        :param driver: WebDriver 实例\n        :param xpath: 要查找的元素 XPath\n        :param timeout: 最大等待时间\n        :return: 找到的 WebElement\n        \"\"\"\n        try:\n            element = WebDriverWait(driver, timeout).until(\n                EC.element_to_be_clickable((By.XPATH, xpath))\n            )\n            return element\n        except Exception as e:\n>           raise TimeoutError(f\"等待元素可点击失败: {xpath}\") from e\nE           TimeoutError: 等待元素可点击失败: //div[contains(text(), '停用用户')]\n\nconftest.py:93: TimeoutError","steps":[{"name":"点击组织架构菜单","time":{"start":1749019352891,"stop":1749019355056,"duration":2165},"status":"passed","steps":[{"name":"点击组织架构菜单","time":{"start":1749019352891,"stop":1749019355056,"duration":2165},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[{"name":"driver","value":"<selenium.webdriver.chrome.webdriver.WebDriver (session=\"d4620d39c036d04ccd9b494f17a12080\")>"}],"stepsCount":1,"hasContent":true,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击第一个部门","time":{"start":1749019355056,"stop":1749019355165,"duration":109},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击更多","time":{"start":1749019355165,"stop":1749019355756,"duration":591},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"attachments":[],"parameters":[],"stepsCount":4,"hasContent":true,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":true},"afterStages":[{"name":"driver::0","time":{"start":1749019364288,"stop":1749019366337,"duration":2049},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"parentSuite","value":"tests.test_delete"},{"name":"suite","value":"test_case_1"},{"name":"host","value":"DESKTOP-DMNLNRR"},{"name":"thread","value":"1844-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_delete.test_case_1"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"95a6f9da0e03f9e9.json","parameterValues":[]}